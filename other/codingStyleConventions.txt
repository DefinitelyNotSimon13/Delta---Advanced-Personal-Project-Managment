https://learn.microsoft.com/en-us/windows/win32/stg/coding-style-conventions

custom Hungarian notation/camelCase based hybrid notation:

variables withIdentifier

/*+===================================================================
  File:      MYFILE.EXT

  Summary:   Brief summary of the file contents and purpose.

  Classes:   Classes declared or used (in source files).

  Functions: Functions exported (in source files).

  Origin:    Indications of where content may have come from. This
             is not a change history but rather a reference to the
             editor-inheritance behind the content or other
             indications about the origin of the source.

  Copyright and Legal notices.
  Copyright and Legal notices.
===================================================================+*/

 Win32  Desktop Technologies  System Services  Structured Storage 
Coding Style Conventions
Article
11/04/2020
3 contributors
In this article
File Header
Plain Comment Block
Class Declaration Header
Class Method Definition Header
Show 4 more
Coding style conventions are used in this sample series to aid clarity and consistency. The "Hungarian" notation conventions are used. These have become a common coding practice in Win32 programming. They include variable prefix notations that give to variable names a suggestion of the type of the variable.

The following table lists common prefixes.

Prefix	Description
a	Array
b	BOOL (int)
c	Char
cb	Count of bytes
cr	Color reference value
cx	Count of x (short)
dw	DWORD (unsigned long)
f	Flags (usually multiple bit values)
fn	Function
g_	Global
h	Handle
i	Integer
l	Long
lp	Long pointer
m_	Data member of a class
n	Short int
p	Pointer
s	String
sz	Zero terminated String
tm	Text metric
u	Unsigned int
ul	Unsigned long (ULONG)
w	WORD (unsigned short)
x,y	x, y coordinates (short)
 

These are often combined, as in the following.

Prefix combination	Description
pszMyString	A pointer to a string.
m_pszMyString	A pointer to a string that is a data member of a class.
 

Other conventions are listed in the following table.

Convention	Description
CMyClass	Prefix 'C' for C++ class names.
COMyObjectClass	Prefix 'CO' for COM object class names.
CFMyClassFactory	Prefix 'CF' for COM class factory names.
IMyInterface	Prefix 'I' for COM interface class names.
CImpIMyInterface	Prefix 'CImpI' for COM interface implementation classes.
 

Some consistent conventions for comment header blocks are used in this sample series as follows.

File Header
/*+===================================================================
  File:      MYFILE.EXT

  Summary:   Brief summary of the file contents and purpose.

  Classes:   Classes declared or used (in source files).

  Functions: Functions exported (in source files).

  Origin:    Indications of where content may have come from. This
             is not a change history but rather a reference to the
             editor-inheritance behind the content or other
             indications about the origin of the source.

  Copyright and Legal notices.
  Copyright and Legal notices.
===================================================================+*/

Plain Comment Block
/*--------------------------------------------------------------------
  Plain block of comment text that usually takes several lines.
  Plain block of comment text that usually takes several lines.
--------------------------------------------------------------------*/


Class Declaration Header
/*C+C+++C+++C+++C+++C+++C+++C+++C+++C+++C+++C+++C+++C+++C+++C+++C+++C
  Class:    CMyClass

  Summary:  Short summary of purpose and content of CMyClass.
            Short summary of purpose and content of CMyClass.

  Methods:  MyMethodOne
              Short description of MyMethodOne.
            MyMethodTwo
              Short description of MyMethodTwo.
            CMyClass
              Constructor.
            ~CMyClass
              Destructor.
C---C---C---C---C---C---C---C---C---C---C---C---C---C---C---C---C-C*/




Class Method Definition Header
/*M+M+++M+++M+++M+++M+++M+++M+++M+++M+++M+++M+++M+++M+++M+++M+++M+++M
  Method:   CMyClass::MyMethodOne

  Summary:  Short summary of purpose and content of MyMethodOne.
            Short summary of purpose and content of MyMethodOne.

  Args:     MYTYPE MyArgOne
              Short description of argument MyArgOne.
            MYTYPE MyArgTwo
              Short description of argument MyArgTwo.

  Modifies: [list of member data variables modified by this method].

  Returns:  MYRETURNTYPE
              Short description of meaning of the return type values.
M---M---M---M---M---M---M---M---M---M---M---M---M---M---M---M---M-M*/

Unexported or Local Function
/*F+F+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Function: MyLocalFunction

  Summary:  What MyLocalFunction is for and what it does.

  Args:     MYTYPE MyFunctionArgument1
              Description.
            MYTYPE MyFunctionArgument1
              Description.

  Returns:  MyReturnType
              Description.
-----------------------------------------------------------------F-F*/


Exported Function Definition Header
/*F+F+++F+++F+++F+++F+++F+++F+++F+++F+++F+++F+++F+++F+++F+++F+++F+++F
  Function: MyFunction

  Summary:  What MyFunction is for and what it does.

  Args:     MYTYPE MyFunctionArgument1
              Description.
            MYTYPE MyFunctionArgument1
              Description.

  Returns:  MyReturnType
              Description.
F---F---F---F---F---F---F---F---F---F---F---F---F---F---F---F---F-F*/